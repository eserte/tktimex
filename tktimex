#!/usr/local/bin/perl -w
# -*- perl -*-

#
# $Id: tktimex,v 3.17 1998/01/02 14:07:21 eserte Exp $
#
# Author: Slaven Rezic
# Copyright: see in subroutine show_about
#
# Mail: <URL:mailto:eserte@cs.tu-berlin.de>
# WWW:  <URL:http://www.cs.tu-berlin.de/~eserte/>
# Talk: <URL:telnet://ole.cs.tu-berlin.de:1211>
#

package main;

use Tk;
use Tk::HList;
#use Tk::Balloon;
use FindBin;
use lib ("$FindBin::RealBin", "/home/e/eserte/lib/perl");
eval { require Tk::UnderlineAll };
use Tk::Getopt 0.34;
use Project;
use strict;
use locale; # for sort

my $root = new Project;

my $quit_dialog;
my $copyright = 'tktimex © 1996, 1997 Slaven Rezic';
my $title = 'tktimex';
my $current_project = undef;
my $start_session_time = time;
my $time_after;
my $time_update = 0;
my $autosave_after;
my @nowtime = localtime;
my $today_time = time - $nowtime[0] - $nowtime[1]*60 - $nowtime[2]*60*60;
my $project_status = "Left: Start/Stop | Middle: Attributes | Right: Create Subproject";
my $separator = '¦';
my($undo_register, $undo_project);

my $options = {};
my @opttable =
  (['file|f', '=s', undef,
   {'subtype' => 'file'}],
   ['autosave|as', '!', 1, {'callback' => \&toggle_autosave }],
   ['update', '=i', 60*10],
   ['dateformat|df', '=s', 'h', {'choices' => ['d'], # XXX d default
				 'strict' => 1,
				 'callback' => \&toggle_dateformat }],
   ['day8', '!', 0, {'callback' => \&toggle_time_arbeitstag }],
   ['archived', '!', 0, {'callback' => \&toggle_show_archived }],
   ['onlytop', '!', 0, {'callback' => \&toggle_show_archived }],
   ['sort', '=s', '', {'choices' => ['nothing', 'name', 'time'],
		       'strict' => 1,
		       'callback' => \&insert_all,
		      }],
   ['oneday-immediately', '!', 1],
   ['geometry', '=s', "500x230"], # XXX
  );
my $opt = new Tk::Getopt(-opttable => \@opttable,
			 -options  => $options,
			 -filename => "$ENV{HOME}/.tktimex");
$opt->set_defaults;
$opt->load_options;
die $opt->usage if !$opt->get_options;

my $top = new MainWindow;
$top->protocol('WM_DELETE_WINDOW', \&quit_program);
$top->title($title);
$top->geometry($options->{'geometry'}) if $options->{'geometry'};

#my $b = $top->Balloon; # XXX

my $menu_frame = $top->Frame(-relief => 'raised',
			     -borderwidth => 2);

my $mb_file = $menu_frame->Menubutton(-text => 'File')->pack(-side => 'left');
$mb_file->command(-label => 'Load',
		  -command => \&load_file);
$mb_file->command(-label => 'Save',
		  -command => \&save_file);
$mb_file->command(-label => 'Save as ...',
		  -command => \&save_as_file);
$mb_file->command(-label => 'Dump',
		  -command => \&dump_data);
$mb_file->command(-label => 'Quit',
		  -command => \&quit_program);

my $mb_project = $menu_frame->Menubutton(-text => 'Project'
					)->pack(-side => 'left');
$mb_project->command(-label => 'New',
		     -command => \&new_project);
$mb_project->command(-label => 'Pause',
		     -command => \&pause_or_cont);
$mb_project->command(-label => 'Undo', # XXX Redo
		     -command => \&undo_or_redo);
$mb_project->separator;
$mb_project->command(-label => 'Today\'s time',
		     -command => \&today_time);
$mb_project->command(-label => 'Show one day',
		     -command => \&show_one_day);

my $mb_options = $menu_frame->Menubutton(-text => 'Options'
					)->pack(-side => 'left');
$mb_options->checkbutton(-label => 'Autosave',
			 -command => \&toggle_autosave,
			 -variable => \$options->{'autosave'},
			);
$mb_options->checkbutton(-label => 'Dateformat H:M:S',
			 -command => \&toggle_dateformat,
			 -onvalue => 'd',
			 -offvalue => 'h',
			 -variable => \$options->{'dateformat'},
			);
$mb_options->checkbutton(-label => 'day = 8h',
			 -command => \&toggle_time_arbeitstag,
			 -variable => \$options->{'day8'},
			);
$mb_options->checkbutton(-label => 'Show archived',
			 -command => \&toggle_show_archived,
			 -variable => \$options->{'archived'},
			);
$mb_options->checkbutton(-label => 'Show only top',
			 -command => \&toggle_show_only_top,
			 -variable => \$options->{'onlytop'},
			);
$mb_options->separator;
$mb_options->command(-label => 'Option editor',
		     -command => sub { $opt->option_editor($top) });

my $mb_help = $menu_frame->Menubutton(-text => 'Help'
				     )->pack(-side => 'left');
$mb_help->command(-label => 'About',
		  -command => \&show_about);
$mb_help->command(-label => 'Index',
		  -command => sub {
		      use Tk::Pod;
		      Tk::Pod->Dir($FindBin::Bin);
		      $top->Pod(-file => "$FindBin::Script");
		  });

my $save_check = $menu_frame->Checkbutton(-text => '*',
					  -variable => \$root->{'modified'},
					  -state => 'disabled',
					 )->pack(-side => 'right');
#$b->attach($save_check, -msg => 'File saved indicator');

my $pause_cont_button = $menu_frame->Button
  (-text => 'Pause',
   -command => \&pause_or_cont)->pack(-side => 'right');

$menu_frame->Button(-text => 'Save',
		    -command => \&save_file)->pack(-side => 'right');

$menu_frame->pack(-fill => 'x');

my $project_frame = $top->Scrolled('HList', -scrollbars => 'oe',
				   -columns => 4,
				   -drawbranch => 1,
				   -header => 1,
				   -selectmode => 'single',
				   -browsecmd => sub { &start_stop(@_) },
				   -separator => $separator,
				  )->pack(-expand => 1, -fill => 'both');
$project_frame->header('create', 0, -text => 'Projects:');
$project_frame->header('create', 1, -text => 'Session');
$project_frame->header('create', 2, -text => 'Today');
$project_frame->header('create', 3, -text => 'All');

my $orig_selectbg = $project_frame->cget(-selectbackground);

$project_frame->bind("<Button-2>" =>
		     sub { &show_attributes(get_entry(@_)) });
$project_frame->bind("<Button-3>" =>
		     sub { &new_sub_project(get_entry(@_)) });

my $status_frame = $top->Frame(-relief => 'ridge',
			       -bd => 1);
$status_frame->pack(-fill => 'x');

my $status_text = $status_frame->Label(-text => $copyright);
$status_text->pack(-side => 'left');

#$b->attach($project_frame, -msg => $project_status);
# XXX verzögert zeigen, da evtl. wichtige Statusmeldungen dadurch
# verdeckt werden
$project_frame->bind("<Enter>" => sub {
			 $status_text->configure(-text => $project_status);
		     });
$project_frame->bind("<Leave>" =>
 		     sub { $status_text->configure(-text => $copyright); });


$menu_frame->UnderlineAll if $menu_frame->can('UnderlineAll');

$opt->process_options;

&set_time_update();

$root->modified(0);
if (!$options->{'file'}) {
    require Tk::FileDialog;
    my $d = $top->FileDialog(-title => 'Enter project file',
			     -File => 'mytimex.pj1',
			     -FPat => '*.pj1');
    my $file = $d->Show;
    if ($file) {
	$file = adjust_filename($file);
	$options->{'file'} = $file;
    } else {
	die "No project file specified";
    }
}
&load_file;

MainLoop;

sub enter_label {
    my($res, $action);
    $status_text->configure(-text => 'Project name:');
    my $entry = $status_frame->Entry(-textvariable => \$res,
				     -width => 30);
    $entry->pack(-side => 'left');
    $entry->waitVisibility;
    $entry->grab;
    $entry->focus;
    $entry->bind("<Return>", sub { $action = 'yes' });
    $entry->bind("<Escape>", sub { $action = 'no' });
    $entry->waitVariable(\$action);
    $entry->grabRelease;
    $entry->destroy;
    $status_text->configure(-text => $copyright);
    $action eq 'yes' ? $res : undef;
}

sub new_project {
    my $label = &enter_label;
    if ($label) {
	my $p = $root->subproject($label);
	&insert_project($p);
	$project_frame->see(make_path($p));
    }
}

sub new_sub_project {
    my $path = shift;
    my $label = &enter_label;
    if ($label) {
	my $p = $project_frame->info('data', $path);
	return if !$p;
	my $sub_p = $p->subproject($label);
	&insert_project($sub_p);
	$project_frame->see(make_path($sub_p));
    }
}

sub insert_project {
    my($p) = @_;
    return if !$p || ($p->archived && !$options->{'archived'});
    my $label = $p->label;
    my $path = make_path($p);
    return if !$path;
    $project_frame->add($path,
			-text => $p->label,
			-itemtype => 'text',
			-data => $p);
    $project_frame->itemCreate
      ($path, 1, -itemtype => 'text',
       -text => &sec2time($p->sum_time($start_session_time, undef, 1)));
    $project_frame->itemCreate
      ($path, 2, -itemtype => 'text',
       -text => &sec2time($p->sum_time($today_time, undef, 1)));
    $project_frame->itemCreate
      ($path, 3, -itemtype => 'text',
       -text => &sec2time($p->sum_time(0, undef, 1)));

    $project_frame->columnWidth(0, -char => 31);
    $project_frame->columnWidth(1, -char => 11);
    $project_frame->columnWidth(2, -char => 11);
    $project_frame->columnWidth(3, -char => 11);
}

sub start_stop {
    my $path = shift;
    my $p = $project_frame->info('data', $path);
    return if !$p;
    if (defined $current_project && $current_project eq $p) {
	&pause_or_cont;
    } else {
	&start_project($p);
    }
}

sub start_project {
    my $p = shift;
    &stop_project;
    $current_project = $p;
    $project_frame->configure(-selectbackground => 'SeaGreen3');
    $pause_cont_button->configure(-text => 'Pause');

    $top->title($title . " (" . $p->pathname . ")");
    $p->start_time;
    &set_timeout();
}

sub pause {
    if (defined $current_project) {
	&stop_project;
	$pause_cont_button->configure(-text => 'Cont');
    }
}

sub pause_or_cont {
    if (defined $current_project) {
	&stop_project;
	$pause_cont_button->configure(-text => 'Cont');
    } else {
	my $sel = $project_frame->selectionGet;
	if ($sel) {
	    my $p = $project_frame->info('data', $sel);
	    return if !$p;
	    start_project($p);
	}
    }
}

sub stop_project {
    if (defined $time_after) {
	$time_after->cancel;
	undef $time_after;
    }
    if (defined $current_project) {
	$current_project->end_time;
	&act_time;
	undef $current_project;
	&save_file if $options->{'autosave'}; # nach undef $current_project!!!
	$project_frame->configure(-selectbackground => $orig_selectbg);
	$top->title($title);
    }
}

sub undo_or_redo {
    if (!$undo_project) {
	return if !defined $current_project;

	require Tk::Dialog;
	my $d = $top->Dialog(-title => 'Undo',
			     -text  => "Really undo last start?",
			     -default_button => 'No',
			     -buttons => ['Yes', 'No'],
			     -popover => 'cursor',
			    );
	return if $d->Show eq 'No';

	my $p = $current_project;
	&stop_project;
# XXX nächste Zeile steuert das Vorhandensein von 'redo'
#	$undo_project = $p;
	$undo_register = pop(@{$p->{'times'}});
	&act_time($p);
    } else {
	my $p = $undo_project;
	if ($undo_register) {
	    push(@{$p->{'times'}}, $undo_register);
	    undef $undo_register;
	}
	undef $undo_project;
	&start_project($p);
    }
}

sub act_time {
    my $p = shift;
    if (!$p) {
	$p = $current_project;
	return if !$p;
    }
    my $project = $p;
    while ($project) {
	&act_time_project($project);
	$project = ($project->level > 1 ? $project->parent : undef);
    }
    &set_timeout();
}

sub act_time_project {
    my($p) = @_;
    my $path = make_path($p);
    return if !$path;
    $project_frame->itemConfigure
      ($path, 1, -text => &sec2time($p->sum_time($start_session_time, 
						 undef, 1)));
    $project_frame->itemConfigure
      ($path, 2, -text => &sec2time($p->sum_time($today_time, undef, 1)));
    $project_frame->itemConfigure
      ($path, 3, -text => &sec2time($p->sum_time(0, undef, 1)));
}

sub set_timeout {
    if (defined $time_after) {
	$time_after->cancel;
    }
    $time_after = $project_frame->after
      ($time_update*1000, sub { &act_time(); } );
}

sub today_time {
    my $sum = 0;
    my $yesterday_time = $today_time - 86400;
    my $yesterday_sum = 0;
    foreach ($root->subproject) {
	my $project_today_time = $_->sum_time($today_time, undef, 1);
	$sum += $project_today_time;
	$yesterday_sum
	  += $_->sum_time($yesterday_time, undef, 1) - $project_today_time;
    }

    require Tk::Dialog;
    $top->Dialog(-title => 'Today\'s time',
		 -text  =>
		 "Today\'s working time:     " .
		 &sec2time($sum, 'h', 0) . "\n" . 
		 "Yesterday\'s working time: " . 
		 &sec2time($yesterday_sum, 'h', 0),
		 -popover => 'cursor',
		)->Show;
}

sub show_one_day {
    require Tk::Date;
    my $f = $top->Toplevel(-title => 'Show one day');
    my $b;
    my @p; # project array for one day
    my $dw = $f->Date(-date_only => 1,
		      -datefmt => "%12A, %2d.%2m.%4y",
		      -choices => [qw(today yesterday)],
		      -command => sub {
			  if ($options->{'oneday-immediately'}) {
			      $b->invoke;
			  }
		      }
		     )->pack;
    my $ff = $f->Frame->pack;
    $b = $ff->Button(-text => 'Show')->pack(-side => 'left');
    $ff->Button(-text => 'Close',
		-command => sub { $f->destroy })->pack(-side => 'left');
    $ff->Checkbutton(-text => 'immediately',
		     -variable => \$options->{'oneday-immediately'}
		    )->pack(-side => 'left');
    my $lb = $f->Scrolled('HList',
			  -columns => 2,
			  -width => 40,
			  -header => 1,
			  -scrollbars => 'osoe',
			  -command => sub {
			      show_intervals($f, $p[$_[0]]) 
			  },
			 )->pack(-expand => 1,
				 -fill => 'both');
    $b->configure(-command => sub {
		      my $s_from = $dw->get("%s");
		      my $s_to = $s_from + 86400;
		      @p = $root->projects_by_interval($s_from, $s_to);
		      $lb->delete('all');
		      my $i = 0;
		      my $sum = 0;
		      foreach (@p) {
			  $lb->add($i, -text => $_->pathname);
			  my $diff = $_->sum_time($s_from, $s_to, 0);
			  $sum += $diff;
			  $lb->itemCreate($i, 1, -text =>
					  sec2time($diff, 'h', 0));
			  $i++;
		      }
		      $lb->header('create', 0, -text => '*** sum ***');
		      $lb->header('create', 1, -text =>
				  sec2time($sum, 'h', 0));
		  });

    if ($options->{'oneday-immediately'}) { $b->invoke }
}

sub load_file {
    if ($root->modified || defined $current_project) {
	require Tk::Dialog;
	my $dialog = $top->Dialog(-title => 'Load',
				  -text  => "Load project data (overwrite current data)?",
				  -default_button => 'No',
				  -buttons => ['Yes', 'No'],
				  -popover => 'cursor',
				 );
	return if $dialog->Show eq 'No';
    }
    &stop_project;
    $root->delete_all;
    if (!$root->load($options->{'file'})) {
	$status_text->configure(-text => $@);
	return;
    }

    $status_text->configure(-text => "Loaded <$options->{'file'}>");
    &insert_all;
    &set_autosave;
    $root->modified(0);
    my $last_project = $root->last_project;
    if ($last_project) {
	$project_frame->selectionSet(make_path($last_project));
	$project_frame->see(make_path($last_project));
	$pause_cont_button->configure(-text => 'Cont');
    }
}

sub insert_all {
    $project_frame->delete('all');
    foreach ($root->sorted_subprojects($options->{'sort'})) {
	&insert_old_project($_);
    }
    if (defined $current_project) {
	$project_frame->selectionSet(make_path($current_project));
    }
}

sub insert_old_project {
    my($p) = @_;
    &insert_project($p);
#    if (!$show_only_top) {
    if (!$options->{'onlytop'}) {
	foreach ($p->sorted_subprojects($options->{'sort'})) {
	    &insert_old_project($_);
	}
    }
}

sub dump_data {
    print STDERR $root->dump_data();
    if (!open(OUT, ">/tmp/timex.data")) {
	$status_text->configure(-text => "Can't write to timex.data: $!");
	return;
    }
    print OUT $root->dump_data();
    close OUT;
}

sub old_save_file {
    eval { require Data::Dumper };
    if ($@) {
	$status_text->configure(-text => $@);
	return;
    }
    if (!open(OUT, ">$options->{'file'}.data")) {
	$status_text->configure
	  (-text => "Can't write to <$options->{'file'}.data>: $!");
	return;
    }
    $Data::Dumper::Purity = 1;
    $Data::Dumper::Indent = 1;
    print OUT Data::Dumper->Dump([$root], ['root']), "\n";
    close OUT;
}

sub save_file {
    my $autosave = shift;

    if (defined $current_project) {
	$current_project->end_time;
    }

    if (!$autosave) {
	foreach (reverse(0 .. 8)) {
	    rename "$options->{'file'}.$_", "$options->{'file'}." . ($_+1);
	}
    }
    rename $options->{'file'}, "$options->{'file'}.0";

    if (!$root->save("$options->{'file'}")) {
	$status_text->configure(-text => $@);
    } else {
	$status_text->configure(-text => "Saved <$options->{'file'}>");
    }
    &old_save_file;

    if (defined $current_project) {
	$current_project->unend_time;
    }

    if (!$autosave) {
	$root->modified(0);
    }

    &set_autosave;
}

sub save_as_file {
    my $autosave = shift;

    require Tk::FileDialog;
    require File::Basename;
    my($file, $path) = File::Basename::fileparse($options->{'file'});
    my $d = $top->FileDialog(-title => 'Enter project file',
			     -File => $file,
			     -Path => $path,
			     -FPat => '*.pj1');
    $file = $d->Show;
    return unless $file;

    $file = adjust_filename($file);
    $options->{'file'} = $file;

    save_file($autosave);
}

sub set_autosave {
    if ($options->{'autosave'}) {
	if (defined $autosave_after) {
	    $autosave_after->cancel;
	}
	$autosave_after = $top->after($options->{'update'}*1000,
				      sub { &save_file(1) });
    }
}

sub toggle_autosave {
    &set_autosave;
}

sub toggle_dateformat {
    &insert_all;
    if (&set_time_update) {
	&set_timeout;
    }
}

sub not_running {
    my($var) = @_;
    if (defined $current_project) {
	require Tk::Dialog;
	$top->Dialog(-title => 'Warning',
		     -text  => 
		     "Can't perform this action while project running",
		     -popover => 'cursor',
		     )->Show;
	if (defined $var) {
	    # alte Einstellung wiederherstellen
	    $$var = ($$var ? 0 : 1);
	}
	return undef;
    } else {
	return 1;
    }
}

sub toggle_show_archived {
    &not_running(\$options->{'archived'}) && &insert_all;
}

sub toggle_show_only_top {
    &not_running(\$options->{'onlytop'}) && &insert_all;
}

sub toggle_time_arbeitstag {
    &not_running(\$options->{'day8'}) && &insert_all;
}

sub show_attributes {
    my $path = shift;

    return if !&not_running;

    my $project = $project_frame->info('data', $path);
    return if !defined $project;

    my $attribute_top = $top->Toplevel(-title => "Attributes");
    my $f = $attribute_top->Frame->pack;
    $f->Label(-text => 'Name: ')->pack(-side => 'left');
    my $label = $project->label;
    $f->Entry(-textvariable => \$label)->pack(-side => 'left');

    if ($project->parent) {
	$attribute_top->Label(-text => 'Parent: ' .
			      ($project->parent eq $root ?
			       '(Root)' : $project->parent->label)
			     )->pack(-anchor => 'w');
    }

    my $new_parent;
    require Tk::BrowseEntry;
    my $browse = $attribute_top->BrowseEntry(-label => "New Parent",
					     -variable => \$new_parent);
    my @all_labels = sort { lc($a) cmp lc($b) } $root->all_pathnames;
    foreach (@all_labels) {
	$_ = '(Root)' if !defined $_ || $_ eq '';
	$browse->insert("end", $_);
    }
    $browse->pack;

    my $archived = $project->{'archived'};
    $attribute_top->Checkbutton(-text => 'Archived',
				-variable => \$archived
			       )->pack(-anchor => 'w');
    $attribute_top->Button(-text => 'Show intervals',
			   -command => sub {
			       show_intervals($attribute_top,
					      $project);
			   })->pack(-anchor => 'w');

    my $command_frame = $attribute_top->Frame->pack(-side => 'bottom');
    my $ok = $command_frame->Button
      (-command => sub {
	   my $insert_all;
	   if ($label && $label ne $project->label) {
	       $project->label($label);
	       $insert_all++;
	   }
	   if (defined $new_parent && grep($_ eq $new_parent, @all_labels)) {
	       my $new_parent_p;
	       if ($new_parent eq '(Root)') {
		   $new_parent_p = $root;
	       } else {
		   $new_parent_p = $root->find_by_label($new_parent);
	       }
	       if ($new_parent_p) {
		   if ($project->reparent($new_parent_p)) {
		       $insert_all++;
		   } else {
		       require Tk::Dialog;
		       $attribute_top->Dialog
			 (-title => 'Warning',
			  -text  => 
			  "Can't reparent " . $project->label . " to " .
			  $new_parent_p->label,
			  -popover => 'cursor',
			 )->Show;
		   }
	       }
	   }
	   $insert_all++ if ($archived && !$project->{'archived'});
	   $project->archived($archived);
	   $attribute_top->destroy();
	   &insert_all if $insert_all;
       }
      );
    &set_text_or_image($ok, "yes.gif", "OK");
    $ok->pack(-side => 'left');
    my $cancel = $command_frame->Button
      (-command => sub { $attribute_top->destroy() }
      );
    &set_text_or_image($cancel, "no.gif", "Cancel");
    $cancel->pack(-side => 'left');
    $attribute_top->Popup(-popover => 'cursor');
}

sub show_intervals {
    my($top, $project) = @_;
    my $w = $top->Toplevel(-title => "Intervals for " . $project->pathname);
    my $lb = $w->Scrolled('HList', -scrollbars => 'oe',
			  -columns => 5,
			  -width => 70,
			  -header => 1,
			 )->pack(-fill => 'both', -expand => 1);
    $lb->header('create', 0, -text => 'From');
    $lb->header('create', 1, -text => 'seconds');
    $lb->header('create', 2, -text => 'To');
    $lb->header('create', 3, -text => 'seconds');
    $lb->header('create', 4, -text => 'Time');
    my $i = 0;
    foreach (@{$project->{'times'}}) {
	my($from, $to) = @$_;
	my(@fromdate) = localtime($from);
	$fromdate[4]++;
	$fromdate[5]+=1900;
	my $fromdate = sprintf
	  "%02d.%02d.%04d %02d:%02d:%02d", @fromdate[3,4,5,2,1,0];
	$lb->add($i, -text => $fromdate);
	$lb->itemCreate($i, 1, -text => $from);

	my(@todate, $todate);
	if (defined $to) {
	    @todate = localtime($to);
	    $todate[4]++;
	    $todate[5]+=1900;
	    $todate = sprintf
	      "%02d.%02d.%04d %02d:%02d:%02d", @todate[3,4,5,2,1,0];
	    $lb->itemCreate($i, 2, -text => $todate);
	    $lb->itemCreate($i, 3, -text => $to);
	    $lb->itemCreate($i, 4, -text => sec2time($to-$from, 'h', 0));
	} else {
	    $lb->itemCreate($i, 2, -text => 'Running (?)');
	}
	$i++;
    }
    $lb->see($i-1);
    $w->Button(-text => 'Close',
	       -command => sub { $w->destroy })->pack;
    $w->Popup(-popover => 'cursor')
}

sub set_time_update {
    my $old_time_update = $time_update;
    $time_update = ($options->{'dateformat'} eq 'd' ? 60 : 1);
    $time_update < $old_time_update;
}

sub set_text_or_image {
    my($widget, $image, $text) = @_;
    # use image if available, otherwise text
    if (-r $image) {
	eval { $widget->configure(-image => $widget->Photo(-file => $image)) };
	if (!$@) { return }
    } 
    $widget->configure(-text => $text);
}

sub make_path {
    my($p) = @_;
    return if !$p;
    die "wrong arg for make_path: <$p>" if !$p->isa('Project');
    my @path = $p->path;
    join($separator, @path[1 .. $#path]);
}

sub get_entry {
    my($w) = @_;
    my $Ev = $w->XEvent;
    $w->GetNearest($Ev->y);
}

sub quit_program {
    require Tk::Dialog;
    if ($root->modified || defined $current_project) {
	if (!defined $quit_dialog) {
	    $quit_dialog = $top->Dialog(-title => 'Quit Program',
					-text  => "Really quit?\n" .
					($root->modified ?
					 "(modified data) " : "") .
					(defined $current_project ?
					 "(project running) " : ""),
					-default_button => 'No',
					-buttons => ['Yes', 'No'],
					-popover => 'cursor',
				       );
	}
	return 0 if $quit_dialog->Show ne 'Yes';
    }
    $top->destroy;
}

sub sec2time {
    my($sec, $dateformat, $day8) = @_;
    $dateformat = $options->{'dateformat'} unless defined $dateformat;
    $day8       = $options->{'day8'}       unless defined $day8;
    my($day, $hour, $min);
    if ($dateformat eq 'd') {
	$day = int($sec / ($day8 ? 28800 : 86400));
	$sec = $sec % ($day8 ? 28800 : 86400);
    }
    $hour = int($sec / 3600);
    $sec  = $sec % 3600;
    $min  = int($sec / 60);
    if ($dateformat eq 'd') {
	sprintf("%3dd %02d:%02d", $day, $hour, $min);
    } else {
	sprintf("%02d:%02d:%02d", $hour, $min, $sec % 60);
    }
}

sub adjust_filename {
    my($file) = @_;
    if ($file !~ /\.pj1$/) {
	$file = "$file.pj1";
    }
    $file;
}

sub show_about {
    my $dia = $top->Toplevel(-title => 'Copyright');
    $dia->Label(-text  => <<'EOF',

tktimex by Slaven Rezic (eserte@cs.tu-berlin.de)

Copyright (c) 1996, 1997 Slaven Rezic. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   This product includes software developed by Slaven Rezic.
4. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

EOF
		-justify => 'left')->pack;
    $dia->Button(-text => 'OK',
		 -command => sub { $dia->destroy })->pack;
    $dia->Popup(-popover => 'cursor');
}

=head1 NAME

tktimex - project time manager

=head1 SYNOPSIS

    tktimex [options]

Possible options are:

        --file
        --[no]autosave   (default: 1) 
        --update         (default: 600) 
        --dateformat     (default: h) 
        --[no]day8
        --[no]archived
        --[no]onlytop
        --geometry       (default: 500x230) 

=head1 DESCRIPTION

B<tktimex> is a project time manager.

XXX

=head1 TODO

- Pod

- Redo, verbessertes Undo oder generelle Edit-Möglichkeiten

- View by day, by project, by interval, by month, by special attrib

=head1 AUTHOR

Slaven Rezic (eserte@cs.tu-berlin.de)

Copyright (c) 1996, 1997 Slaven Rezic. All rights reserved.

For a complete copyright see the Help/About menu entry.

=cut
