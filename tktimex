#!/usr/local/bin/perl 
# -*- perl -*-

#
# $Id: tktimex,v 1.2 1996/10/28 10:31:23 eserte Exp $
# Author: Slaven Rezic
# Mail: <URL:mailto:eserte@cs.tu-berlin.de>
# WWW:  <URL:http://www.cs.tu-berlin.de/~eserte/>
# Talk: <URL:telnet://ole.cs.tu-berlin.de:1211>
#

#use strict;

package Project;

my $pool = [];

sub new {
    my($pkg, $label) = @_;
    my $self = {};
    $self->{'label'} = $label;
    $self->{'subprojects'} = [];
    $self->{'archived'} = 0;
    $self->{'times'} = [];
    bless $self, $pkg;
    $self->push_pool;
    $self;
}

sub push_pool {
    my $self = shift;
    push(@{$Project::pool}, $self);
}

sub pool {
    my($pkg, $pool) = @_;
    if (defined $pool) {
	$Project::pool = $pool;
    } else {
	$Project::pool;
    }
}

sub label {
    $_[0]->{'label'};
}

sub parent {
    undef;
}

sub subproject {
    my($self, $label) = @_;
    if (defined $label) {
	my $sub = Subproject->new($label);
	$sub->{'parent'} = $self;
	push(@{$self->{'subprojects'}}, $sub);
	$sub;
    } else {
	$self->{'subprojects'};
    }
}

sub level {
    0;
}

sub start_time {
    my($self, $time) = @_;
    $time = time unless $time;
    push(@{$self->{'times'}}, [$time]);
}

sub end_time {
    my($self, $time) = @_;
    $time = time unless $time;
    my @times = @{$self->{'times'}};
    $times[$#times]->[1] = $time;
}

sub sum_time {
    my($self, $since, $recursive) = @_;
    my $sum = 0;
    if ($recursive) {
	foreach (@{$self->subproject}) {
	    $sum += $_->sum_time($since, $recursive);
	}
    }
    my @times = @{$self->{'times'}};
    my $i = -1;
    foreach (@times) {
	my($from, $to) = ($_->[0], $_->[1]);
	$i++;
	if (defined $from) {
	    if (!defined $to) {
		if ($i != $#times) {
		    warn "No end time in $self";
		    next;
		} else {
		    $to = time;
		}
	    }
	    if ($since =~ /^\d+$/ && $to >= $since) {
		if ($from >= $since) {
		    $sum += $to - $from;
		} else {
		    $sum += $to - $since;
		}
	    }
	} else {
	    warn "No start time in $self";
	}
    }
    $sum;
}

sub archived {
    my($self, $flag) = @_;
    if (!defined $flag) {
	$self->{'archived'};
    } else {
	if ($flag) {
	    $self->{'archived'} = 1;
	} else {
	    $self->{'archived'} = 0;
	}
    }
}

######################################################################

package Subproject;
@Subproject::ISA = qw(Project);

sub parent {
    $_[0]->{'parent'};
}

sub level {
    my $self = shift;
    $self->parent->level + 1;
}

sub push_pool { }

######################################################################

package main;

use Tk;
use Tk::ROText;
use Data::Dumper;

my $top = new MainWindow;
$top->protocol('WM_DELETE_WINDOW', \&quit_program);

my $quit_dialog;
my $datafile = 'mytimex.data';
my $current_project_index = undef;
my $start_session_time = time;
my $time_after;
my $time_update = 1; #60;
my @nowtime = localtime;
my $today_time = time - $nowtime[0] - $nowtime[1]*60 - $nowtime[2]*60*60;
my @projects_in_text;
my %projects_in_text;
#my $menu_frame = $top->Frame;
#$menu_frame->pack(-expand => 1, -fill => 'x');

my $buttons_frame = $top->Frame(-relief => 'ridge',
				-bd => 1);
$buttons_frame->pack(-expand => 1, -fill => 'x');
$buttons_frame->Button(-text => 'New Project',
		       -command => \&new_project)->pack(-side => 'left');
$buttons_frame->Button(-text => 'Load',
		       -command => \&load_file)->pack(-side => 'left');
$buttons_frame->Button(-text => 'Save',
		       -command => \&save_file)->pack(-side => 'left');
$buttons_frame->Button(-text => 'Pause',
		       -command => \&pause)->pack(-side => 'left');
$buttons_frame->Button(-text => 'Quit',
		       -command => \&quit_program)->pack(-side => 'left');

my $project_frame = $top->Frame;
$project_frame->pack(-expand => 1, -fill => 'both');
my $header_text = $project_frame->ROText(-tabs => ['4c', '6.5c', '9c'],
					 -width => 63,
					 -height => 2,
					 -relief => 'ridge');
$header_text->pack(-expand => 1, -fill => 'x');
$header_text->insert('1.0', "\t\tTime\nProjects:\tSession\tToday\tAll");

my $projects_text = $project_frame->Scrolled('ROText',
					     -scrollbars => 'e',
					     -tabs => ['4c', '6.5c', '9c'],
					     -width => 63,
					     -height => 10,
					     -relief => 'ridge');
$projects_text->pack(-expand => 1, -fill => 'both');
$projects_text->bindtags(qw(dummy));
$projects_text->tagConfigure('running',
			     -relief => 'raised',
			     -borderwidth => 1,
			     -background  => 'SeaGreen3');
$projects_text->tagBind('project',
			"<Button-1>" =>
			sub { &start_stop($projects_text->index('current')) });
$projects_text->tagBind('project',
			"<Button-3>" =>
			sub { &new_sub_project($projects_text->index('current')) });

my $status_frame = $top->Frame(-relief => 'ridge',
			       -bd => 1);
$status_frame->pack(-expand => 1, -fill => 'x');
my $status_text = $status_frame->Label(-text => 'tktimex (c) 1996 Slaven Rezic');
$status_text->pack(-side => 'left');

MainLoop;

sub enter_label {
    my($res, $action);
    $status_text->configure(-text => 'Project name:');
    my $entry = $status_frame->Entry(-textvariable => \$res,
				     -width => 30);
    $entry->pack(-side => 'left');
    $entry->waitVisibility;
#    $entry->grab;
    $entry->focus;
    $entry->bind("<Return>", sub { $action = 'yes' });
    $entry->bind("<Escape>", sub { $action = 'no' });
    $entry->waitVariable(\$action);
#    $entry->grabRelease;
    $entry->destroy;
    $status_text->configure(-text => '');
    $action eq 'yes' ? $res : undef;
}

sub new_project {
    my $label = &enter_label;
    if ($label) {
	my $p = new Project($label);
	&insert_project($p, 0);
    }
}

sub new_sub_project {
    my $index = shift;
    my $label = &enter_label;
    if ($label) {
	my $project_index = &get_project_index($index);
	return if !defined $project_index;
	my $p = $projects_in_text[$project_index];
	my $sub_p = $p->subproject($label);
	&insert_project($sub_p,
			$sub_p->level,
			"project-$project_index.last");
    }
}

sub insert_project {
    my($p, $indent, $after) = @_;
    my $label = $p->label;
    $indent = 0 unless $indent;
    $after = 'end' unless $after;
    push(@projects_in_text, $p);
    my $index = $#projects_in_text;
    $projects_in_text{$p} = $index;
    $projects_text->insert
      ($after, 
       ("-" x ($indent-1)) . ($indent ? "> " : "") .
       $label, ["label-$index", "project-$index", 'project'],
       "\t" . &sec2time($p->sum_time($start_session_time, 1)) .
       "\t" . &sec2time($p->sum_time($today_time, 1)) .
       "\t" . &sec2time($p->sum_time(0, 1)) . "\n",
       ["time-$index", "project-$index"]);
}

sub start_stop {
    my $index = shift;
    my $project_index = &get_project_index($index);
    return if !defined $project_index;
    if (defined $current_project_index &&
	$current_project_index == $project_index) {
	&stop_project;
    } else {
	&start_project($project_index);
    }
}

sub get_project_index {
    my $index = shift;
    my @tags = $projects_text->tagNames($index);
    my $project_index;
    foreach (@tags) {
	if (/^project-(.*)/) {
	    $project_index = $1;
	    last;
	}
    }
    $project_index;
}

sub start_project {
    my $project_index = shift;
    &stop_project;
    $current_project_index = $project_index;
    $projects_text->tagAdd('running',
			   "label-$project_index.first",
			   "label-$project_index.last");
    $projects_in_text[$current_project_index]->start_time;
    $time_after = $projects_text->after
      ($time_update*1000, sub { &act_time($project_index); } );
}

sub pause {
    if (defined $current_project_index) {
	&stop_project;
    }
}

sub stop_project {
    if (defined $time_after) {
	$time_after->cancel;
	undef $time_after;
    }
    if (defined $current_project_index) {
	$projects_in_text[$current_project_index]->end_time;
	undef $current_project_index;
	$projects_text->tagRemove('running', '1.0', 'end');
    }
}

sub act_time {
    my $curr_project_index = shift;
    my $project_index = $curr_project_index;
    my $project = $projects_in_text[$project_index];
    while ($project) {
	$projects_text->delete("time-$project_index.first",
			       "time-$project_index.last");
	$projects_text->insert
	  ("label-$project_index.last",
	   "\t" . &sec2time($project->sum_time($start_session_time, 1)) .
	   "\t" . &sec2time($project->sum_time($today_time, 1)) .
	   "\t" . &sec2time($project->sum_time(0, 1)) . "\n",
	   ["time-$project_index", "project-$project_index"]);
	$project = ($project->isa("Subproject") ? $project->parent : undef);
	$project_index = $projects_in_text{$project} if $project;
    }
    $time_after = $projects_text->after
      ($time_update*1000, sub { &act_time($curr_project_index); } );
}

sub load_file {
    &stop_project;
#    my $pool;
    # XXX warum dieser Workaround und kein 'do $datafile' ?
    if (!open(D, $datafile)) {
	warn "No $datafile!";
	return;
    }
    local($/) = undef;
    my $data = <D>;
    close D;
    eval $data;
    print $@, "\n" if $@;
    Project->pool($pool);
    $projects_text->delete('1.0', 'end');
    @projects_in_text = ();
    %projects_in_text = ();
    foreach (@{$pool}) {
	&insert_old_project($_, 0);
    }
}

sub insert_old_project {
    my($p, $indent) = @_;
    &insert_project($p, $indent);
    foreach (@{$p->subproject}) {
	&insert_old_project($_, $indent+1);
    }
}

sub save_file {
    if (defined $current_project_index) {
	$projects_in_text[$current_project_index]->end_time;
    }
    if (!open(OUT, ">$datafile")) {
	warn "Can't write to $datafile";
	return;
    }
    $Data::Dumper::Purity = 1;
    print OUT Data::Dumper->Dump([Project->pool], ['pool']), "\n";
    close OUT;
}

sub quit_program {
    require Tk::Dialog;
    if (!defined $quit_dialog) {
	$quit_dialog = $top->Dialog(-title => 'Quit Program',
				    -text  => "Really quit?",
				    -default_button => 'No',
				    -buttons => ['Yes', 'No']);
    }
    return 0 if $quit_dialog->Show ne 'Yes';
    $top->destroy;
}

sub sec2time {
    my $sec = shift;
    my($day, $hour, $min);
    $day  = int($sec / 86400);
    $sec  = $sec % 86400;
    $hour = int($sec / 1440);
    $sec  = $sec % 1440;
    $min  = int($sec / 60);
#    sprintf("%3dd %02d:%02d", $day, $hour, $min);
    sprintf("%02d:%02d:%02d", $hour, $min, $sec % 60); # XXX Test
}

#my $p = new Project("IHK-CGI");
#my $r = new Project("IHK Diskversion");
#my $s = $p->subproject("agrep");
#$p->start_time(time-30); $p->end_time(time-20);
#$p->start_time(time-10); $p->end_time(time+40);
#$s->start_time(time-40);
#print STDERR Data::Dumper->Dump([Project->pool], ['pool']), "\n";
#print STDERR $p->sum_time(time-20,1),"\n";
